# assets/tests.py
from django.urls import reverse
from rest_framework import status
from rest_framework.test import APITestCase
from users.models import User, Base
from .models import EquipmentType, AssetInventory, PurchaseRecord

class PurchaseTransactionTests(APITestCase):
    def setUp(self):
        """Set up initial data for tests."""
        self.base = Base.objects.create(name="Main Operating Base")
        self.admin_user = User.objects.create_user(username='admin', password='password123', role=User.Role.ADMIN)
        self.equipment = EquipmentType.objects.create(name="M4 Rifle", category="Weapon")

    def test_purchase_updates_inventory_correctly(self):
        """
        Verify that creating a PurchaseRecord via the API correctly
        updates the corresponding AssetInventory.
        """
        # Log the user in to make authenticated requests
        self.client.force_authenticate(user=self.admin_user)

        # URL for creating purchases
        url = reverse('purchase-list') # 'purchase-list' is auto-generated by the router

        # Data for the new purchase
        data = {
            "equipment_type_id": self.equipment.pk,
            "base_id": self.base.pk,
            "quantity": 10,
            "vendor": "Arms Corp"
        }

        # Make the POST request
        response = self.client.post(url, data, format='json')

        # --- Assertions ---
        # 1. Check if the request was successful
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)

        # 2. Check if the PurchaseRecord was created in the database
        self.assertEqual(PurchaseRecord.objects.count(), 1)
        self.assertEqual(PurchaseRecord.objects.get().quantity, 10)

        # 3. CRITICAL: Check if the AssetInventory was created/updated
        self.assertEqual(AssetInventory.objects.count(), 1)
        inventory = AssetInventory.objects.get(base=self.base, equipment_type=self.equipment)
        self.assertEqual(inventory.quantity, 10)

        # 4. Make a second purchase to test inventory incrementing
        data['quantity'] = 5
        response = self.client.post(url, data, format='json')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)

        # Refresh inventory from DB and check the new total
        inventory.refresh_from_db()
        self.assertEqual(inventory.quantity, 15) # 10 (initial) + 5 (new) = 15